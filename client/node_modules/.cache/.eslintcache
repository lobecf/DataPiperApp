[{"/Users/charleslobe/website/src/index.js":"1","/Users/charleslobe/website/src/reportWebVitals.js":"2","/Users/charleslobe/website/src/App.js":"3","/Users/charleslobe/website/src/Nav.js":"4","/Users/charleslobe/website/src/Header.js":"5","/Users/charleslobe/website/src/About.js":"6","/Users/charleslobe/website/src/Experience.js":"7","/Users/charleslobe/website/src/Resume.js":"8","/Users/charleslobe/website/src/Projects.js":"9","/Users/charleslobe/website/src/Contact.js":"10","/Users/charleslobe/website/src/Home.js":"11","/Users/charleslobe/dataPiperApp/client/src/index.js":"12","/Users/charleslobe/dataPiperApp/client/src/components/App.js":"13","/Users/charleslobe/dataPiperApp/client/src/components/JobSearch.js":"14","/Users/charleslobe/dataPiperApp/client/src/components/ApplicantForm.js":"15","/Users/charleslobe/dataPiperApp/client/src/components/JobDetail.js":"16","/Users/charleslobe/dataPiperApp/client/src/components/Header.js":"17","/Users/charleslobe/dataPiperApp/client/src/components/NavBar.js":"18","/Users/charleslobe/dataPiperApp/client/src/components/CandidateDetail.js":"19","/Users/charleslobe/dataPiperApp/client/src/components/CreateListing.js":"20"},{"size":500,"mtime":1637779193677,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1637778478263,"results":"23","hashOfConfig":"22"},{"size":314,"mtime":1638025167332,"results":"24","hashOfConfig":"22"},{"size":1122,"mtime":1638025150481,"results":"25","hashOfConfig":"22"},{"size":461,"mtime":1637790583248,"results":"26","hashOfConfig":"22"},{"size":551,"mtime":1638026886588,"results":"27","hashOfConfig":"22"},{"size":134,"mtime":1637787840340,"results":"28","hashOfConfig":"22"},{"size":122,"mtime":1637787799138,"results":"29","hashOfConfig":"22"},{"size":305,"mtime":1638027016558,"results":"30","hashOfConfig":"22"},{"size":245,"mtime":1638026991542,"results":"31","hashOfConfig":"22"},{"size":90,"mtime":1637789756181,"results":"32","hashOfConfig":"22"},{"size":650,"mtime":1651681324422,"results":"33","hashOfConfig":"34"},{"size":1779,"mtime":1651697736215,"results":"35","hashOfConfig":"34"},{"size":2866,"mtime":1651698717898,"results":"36","hashOfConfig":"34"},{"size":6018,"mtime":1651769818535,"results":"37","hashOfConfig":"34"},{"size":3099,"mtime":1651699942803,"results":"38","hashOfConfig":"34"},{"size":464,"mtime":1651685845081,"results":"39","hashOfConfig":"34"},{"size":552,"mtime":1651686214356,"results":"40","hashOfConfig":"34"},{"size":2309,"mtime":1651598023372,"results":"41","hashOfConfig":"34"},{"size":5205,"mtime":1651702735066,"results":"42","hashOfConfig":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"popbkn",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1hr3nit",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},"/Users/charleslobe/website/src/index.js",[],["92","93"],"/Users/charleslobe/website/src/reportWebVitals.js",[],"/Users/charleslobe/website/src/App.js",["94","95","96","97"],"/Users/charleslobe/website/src/Nav.js",[],"/Users/charleslobe/website/src/Header.js",[],"/Users/charleslobe/website/src/About.js",[],"/Users/charleslobe/website/src/Experience.js",[],"/Users/charleslobe/website/src/Resume.js",[],"/Users/charleslobe/website/src/Projects.js",[],"/Users/charleslobe/website/src/Contact.js",[],"/Users/charleslobe/website/src/Home.js",[],"/Users/charleslobe/dataPiperApp/client/src/index.js",[],["98","99"],"/Users/charleslobe/dataPiperApp/client/src/components/App.js",[],"/Users/charleslobe/dataPiperApp/client/src/components/JobSearch.js",["100"],"import React, { useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction JobSearch ({allJobs}) {\n\n    const { search } = window.location;\n    const query = new URLSearchParams(search).get('s');\n    const [searchQuery, setSearchQuery] = useState(query || '');\n    \n    const filterJobs = (allJobs, query) => {\n      if (!query) {\n          return allJobs;\n      }\n    \n      return allJobs.filter((job) => {\n          const jobRole = job.role.toLowerCase();\n          return jobRole.includes(query);\n      });\n    };\n    \n    const filteredJobs = filterJobs(allJobs, searchQuery);\n\n    return (\n        <Container>\n    \n            <Form action=\"/\" method=\"get\">\n            <Wrapper>\n            <Header htmlFor=\"header-search\">\n            <span>Job Listings</span>\n            </Header>\n            <Input\n            value={searchQuery}\n            onInput={e => setSearchQuery(e.target.value)}\n            type=\"text\"\n            id=\"header-search\"\n            placeholder=\"Search by role\"\n            name=\"s\" \n            />\n        <SubmitButton type=\"submit\">Search</SubmitButton>\n        </Wrapper>\n            <ul>\n          {filteredJobs.map((job) => (\n              <List>\n              <Button2 as={Link} to={`jobs/${job.id}`}key={job.id}>{job.role}{\"\"}</Button2>\n              </List>\n          ))}\n        </ul>\n    </Form>\n    \n        </Container>\n    )\n}\n\nexport default JobSearch\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-color: white;\nborder: white;\nborder-radius: 20px;\npadding-left: 5px;\nmargin-bottom: 5px;\n`;\n\nconst Container = styled.section `\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`\n\nconst Wrapper = styled.section`\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n  padding-bottom: 20px;\n`;\n\nconst Header = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;\n\nconst P = styled.p `\ndisplay: flex;\nposition: relative;\n`\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst List = styled.h1`\nmargin-left: 5px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 15px;\ncolor: lightsalmon;\npadding-bottom: 15px;\n`\n\nconst Button2 = styled.button`\n  font-family: 'Quicksand', sans-serif;\n  text-decoration: none;\n  color: white;\n  &:hover {\n      color: orange;\n      transition: all 0.4s ease 0s;\n    }\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n`;","/Users/charleslobe/dataPiperApp/client/src/components/ApplicantForm.js",["101"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction ApplicantForm ( {jobId} ) {\n    const [applicant, setApplicant] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [zipcode, setZipcode] = useState(\"\");\n    const [errors, setErrors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [job, setJob] = useState(null)\n    const history = useHistory();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        setErrors([]);\n        setIsLoading(true);\n        fetch(\"/applicants\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            first_name: firstName,\n            last_name: lastName,\n            email,\n            phone,\n            address,\n            city,\n            state,\n            country,\n            zipcode,\n            job_id: jobId,\n          }),\n        }).then(res => {\n            if (res.ok) {\n              return res.json()\n            } else {\n              return res.json().then(errors => Promise.reject(errors))\n            }\n          })\n          .then(applicant => setApplicant(applicant));\n          \n          history.push(`/jobs/${jobId}`)\n      }\n  \n      const fetchEventCallback = useCallback(\n        () => {\n          fetch(`/jobs/${jobId}`, {\n            credentials: 'include'\n          })\n            .then(res => res.json())\n            .then(job => setJob(job))\n        },\n        [jobId],\n      )\n    \n      useEffect(() => {\n        fetchEventCallback()\n      }, [fetchEventCallback])\n  \n      console.log(job)\n  \n      if(!job) { return <div></div>}\n    return (\n        <Wrapper2>\n            <H3>{job.role}</H3>\n            <Wrapper>\n            <Form onSubmit={handleSubmit}>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"first-name\"\n                placeholder=\"First Name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"last-name\"\n                placeholder=\"Last Name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"phone\"\n                placeholder=\"Phone\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"Street Address\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"city\"\n                placeholder=\"City\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"state\"\n                placeholder=\"State\"\n                value={state}\n                onChange={(e) => setState(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"country\"\n                placeholder=\"Country\"\n                value={country}\n                onChange={(e) => setCountry(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"zipcode\"\n                placeholder=\"Zip Code\"\n                value={zipcode}\n                onChange={(e) => setZipcode(e.target.value)}\n                />\n                </P>\n                <SubmitButton type=\"submit\">{isLoading ? \"Loading...\" : \"Submit\"}</SubmitButton>\n                \n                {errors.map((err) => (\n                    <error key={err}>{err}</error>\n                ))}\n\n            </Form>\n            </Wrapper>\n        </Wrapper2>\n    )\n}\n\nexport default ApplicantForm\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n    margin-bottom: 15px;\n`;\n\nconst Wrapper2 = styled.section`\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`;\n\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nbackground: white;\nborder-color: white;\n`;\n\nconst P = styled.p `\ndisplay: flex;\nposition: relative;\n`\n\nconst H3 = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;","/Users/charleslobe/dataPiperApp/client/src/components/JobDetail.js",["102","103","104"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction JobDetail ( {jobId} ) {\n    const [job, setJob] = useState(null)\n    // const history = useHistory()\n\n    const fetchEventCallback = useCallback(\n      () => {\n        fetch(`/jobs/${jobId}`, {\n          credentials: 'include'\n        })\n          .then(res => res.json())\n          .then(job => setJob(job))\n      },\n      [jobId],\n    )\n  \n    useEffect(() => {\n      fetchEventCallback()\n    }, [fetchEventCallback])\n\n    console.log(job)\n\n    if(!job) { return <div></div>}\n    return (\n        <Container>\n            <Header>{job.role}</Header>\n            <List>\n            <P>Client: {job.client}</P>\n            <P>POC: {job.poc}</P>\n            <P>Email: {job.email}</P>\n            <P>Urgency: {job.urgancy}</P>\n            <P>Openings: {job.quantity}</P>\n            <P>Skills needed: {job.skills_needed}</P>\n            </List>\n            <Wrapper>\n            <Button2 as={Link} to={`/jobs/apply/${jobId}`}>UPDATE LISTING</Button2>\n            </Wrapper>\n            <List>\n              <P2>Candidates:</P2>\n              </List>\n              <ul>\n        \n            {job.applicants.map(applicant => (\n              <List>\n                <Button2 as={Link} to={`/applicant/${applicant.id}`}>{applicant.first_name}{\" \"}{applicant.last_name}</Button2>\n                </List>\n              ))}\n            \n            </ul>\n            <Wrapper>\n            <Button2 as={Link} to={`/jobs/apply/${jobId}`}>ADD CANDIDATE</Button2>\n            </Wrapper>\n        </Container>\n    )\n}\n\nexport default JobDetail\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nmargin-bottom: 5px;\n`;\n\nconst Container = styled.section `\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`\n\nconst Wrapper = styled.section`\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n  padding-bottom: 20px;\n`;\n\nconst Header = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;\n\nconst P = styled.p `\npadding: 15px;\n`\nconst P2 = styled.p `\npadding-left: 15px;\n`\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst List = styled.h1`\nmargin-left: 5px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 15px;\ncolor: white;\npadding-bottom: 7px;\n`\n\nconst Button2 = styled.button`\n  font-family: 'Quicksand', sans-serif;\n  text-decoration: none;\n  color: white;\n  &:hover {\n      color: orange;\n      transition: all 0.4s ease 0s;\n    }\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n    margin-bottom: 15px;\n`;\n\n","/Users/charleslobe/dataPiperApp/client/src/components/Header.js",["105"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Header () {\n\n    return (\n        <div>\n            <H1>data piper</H1>\n            <H2>Employee Portal</H2>\n        </div>\n    )\n}\n\nexport default Header;\n\nconst H1 = styled.h1 `\nmargin-top: 40px;\nmargin-bottom: 1px;\nfont-size: 50px;\ncolor: dodgerblue;\nfont-family: 'Goldman', cursive;\n`\n\nconst H2 = styled.h1 `\nfont-size: 17px;\nfont-family: arial;\npadding-bottom: 20px;\n`","/Users/charleslobe/dataPiperApp/client/src/components/NavBar.js",["106"],"import React, { useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction NavBar () {\n\n    return (\n        <div>\n            <Nav as={Link} to=\"/\">JOB LISTINGS</Nav>\n            <Nav as={Link} to=\"/create\">CREATE LISTING</Nav>\n            <Nav as={Link} to=\"/applicants\">ALL CANDIDATES</Nav>\n        </div>\n    )\n}\n\nexport default NavBar;\n\nconst Nav = styled.button`\n  display: inline-block;\n  padding: 10px;\n  font-size: 14px;\n  font-family: arial;\n  text-decoration: none;\n  color: black;\n`;","/Users/charleslobe/dataPiperApp/client/src/components/CandidateDetail.js",["107","108"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction CandidateDetail ( {candidateId} ) {\n    const [candidate, setCandidate] = useState(null)\n    // const history = useHistory()\n\n    const fetchEventCallback = useCallback(\n      () => {\n        fetch(`/applicants/${candidateId}`, {\n          credentials: 'include'\n        })\n          .then(res => res.json())\n          .then(candidate => setCandidate(candidate))\n      },\n      [candidateId],\n    )\n  \n    useEffect(() => {\n      fetchEventCallback()\n    }, [fetchEventCallback])\n\n    console.log(candidate)\n\n    if(!candidate) { return <div></div>}\n    return (\n        <Container>\n            <Header>{candidate.first_name}{\" \"}{candidate.last_name}</Header>\n            <List>\n            <P>Email: {candidate.email}</P>\n            <P>Phone: {candidate.phone}</P>\n            <P>Address: {candidate.address}</P>\n            <P>City: {candidate.city}</P>\n            <P>Country: {candidate.country}</P>\n            <P>zipcode: {candidate.zipcode}</P>\n            </List>\n            <Wrapper>\n            <Button2 as={Link}>Update Candidate</Button2>\n            </Wrapper>\n        </Container>\n    )\n}\n\nexport default CandidateDetail\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nmargin-bottom: 5px;\n`;\n\nconst Container = styled.section `\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`\n\nconst Wrapper = styled.section`\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n  padding-bottom: 20px;\n`;\n\nconst Header = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;\n\nconst P = styled.p `\npadding: 15px;\n`\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst List = styled.h1`\nmargin-left: 5px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 15px;\ncolor: lightsalmon;\npadding-bottom: 15px;\n`\n\nconst Button2 = styled.button`\n  font-family: 'Quicksand', sans-serif;\n  text-decoration: none;\n  color: white;\n  &:hover {\n      color: orange;\n      transition: all 0.4s ease 0s;\n    }\n`;","/Users/charleslobe/dataPiperApp/client/src/components/CreateListing.js",["109"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\nimport { useHistory } from 'react-router-dom';\n\nfunction CreateListing () {\n    const [job, setJob] = useState(\"\")\n    const [client, setClient] = useState(\"\");\n    const [poc, setPoc] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [role, setRole] = useState(\"\");\n    const [urgancy, setUrgancy] = useState(\"\");\n    const [quantity, setQuantity] = useState(\"\");\n    const [skillsNeeded, setSkillsNeeded] = useState(\"\");\n    const [errors, setErrors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const history = useHistory();\n\n    function handleSubmit(e) {\n      e.preventDefault();\n        setErrors([]);\n        setIsLoading(true);\n        fetch(\"/jobs\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            client,\n            poc,\n            email,\n            role,\n            urgancy,\n            quantity,\n            skills_needed: skillsNeeded,\n          }),\n        }).then(res => {\n          if (res.ok) {\n            return res.json()\n          } else {\n            return res.json().then(errors => Promise.reject(errors))\n          }\n        })\n        .then(job => setJob(job));\n        \n        history.push(\"/\")\n      }\n\n      const fetchEventCallback = useCallback(\n        () => {\n          fetch(`/jobs/${job.Id}`, {\n            credentials: 'include'\n          })\n            .then(res => res.json())\n            .then(job => setJob(job))\n        },\n        [job.Id],\n      )\n    \n      useEffect(() => {\n        fetchEventCallback()\n      }, [fetchEventCallback])\n\n      if(!job) { return <div></div>}\n    return (\n        <Wrapper2>\n            <H3>Create Listing</H3>\n            <Wrapper>\n            <Form onSubmit={handleSubmit}>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"client\"\n                placeholder=\"Client\"\n                value={client}\n                onChange={(e) => setClient(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"poc\"\n                placeholder=\"POC\"\n                value={poc}\n                onChange={(e) => setPoc(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"role\"\n                placeholder=\"Role Name\"\n                value={role}\n                onChange={(e) => setRole(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"urgancy\"\n                placeholder=\"Urgency\"\n                value={urgancy}\n                onChange={(e) => setUrgancy(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"number\"\n                id=\"quantity\"\n                placeholder=\"Quantity\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"skills\"\n                placeholder=\"Skills Needed\"\n                value={skillsNeeded}\n                onChange={(e) => setSkillsNeeded(e.target.value)}\n                />\n                </P>\n                <SubmitButton type=\"submit\">{isLoading ? \"Loading...\" : \"Submit\"}</SubmitButton>\n                \n                {errors.map((err) => (\n                    <error key={err}>{err}</error>\n                ))}\n\n            </Form>\n            </Wrapper>\n        </Wrapper2>\n    )\n}\n\nexport default CreateListing\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n    margin-bottom: 15px;\n`;\n\nconst Wrapper2 = styled.section`\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`;\n\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nbackground: white;\nborder-color: white;\n`;\n\nconst P = styled.p `\ndisplay: flex;\nposition: relative;\n`\n\nconst H3 = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":14},{"ruleId":"114","severity":1,"message":"118","line":4,"column":27,"nodeType":"116","messageId":"117","endLine":4,"endColumn":33},{"ruleId":"114","severity":1,"message":"119","line":4,"column":35,"nodeType":"116","messageId":"117","endLine":4,"endColumn":41},{"ruleId":"114","severity":1,"message":"120","line":4,"column":43,"nodeType":"116","messageId":"117","endLine":4,"endColumn":48},{"ruleId":"110","replacedBy":"121"},{"ruleId":"112","replacedBy":"122"},{"ruleId":"114","severity":1,"message":"123","line":93,"column":7,"nodeType":"116","messageId":"117","endLine":93,"endColumn":8},{"ruleId":"114","severity":1,"message":"124","line":6,"column":12,"nodeType":"116","messageId":"117","endLine":6,"endColumn":21},{"ruleId":"114","severity":1,"message":"125","line":62,"column":7,"nodeType":"116","messageId":"117","endLine":62,"endColumn":12},{"ruleId":"114","severity":1,"message":"126","line":103,"column":7,"nodeType":"116","messageId":"117","endLine":103,"endColumn":11},{"ruleId":"114","severity":1,"message":"127","line":125,"column":7,"nodeType":"116","messageId":"117","endLine":125,"endColumn":19},{"ruleId":"114","severity":1,"message":"128","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"128","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"125","line":47,"column":7,"nodeType":"116","messageId":"117","endLine":47,"endColumn":12},{"ruleId":"114","severity":1,"message":"126","line":85,"column":7,"nodeType":"116","messageId":"117","endLine":85,"endColumn":11},{"ruleId":"114","severity":1,"message":"129","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":14},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.",["130"],["131"],"'P' is assigned a value but never used.","'applicant' is assigned a value but never used.","'Input' is assigned a value but never used.","'Form' is assigned a value but never used.","'SubmitButton' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]