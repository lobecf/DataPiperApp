[{"/Users/charleslobe/website/src/index.js":"1","/Users/charleslobe/website/src/reportWebVitals.js":"2","/Users/charleslobe/website/src/App.js":"3","/Users/charleslobe/website/src/Nav.js":"4","/Users/charleslobe/website/src/Header.js":"5","/Users/charleslobe/website/src/About.js":"6","/Users/charleslobe/website/src/Experience.js":"7","/Users/charleslobe/website/src/Resume.js":"8","/Users/charleslobe/website/src/Projects.js":"9","/Users/charleslobe/website/src/Contact.js":"10","/Users/charleslobe/website/src/Home.js":"11","/Users/charleslobe/dataPiperApp/client/src/index.js":"12","/Users/charleslobe/dataPiperApp/client/src/components/App.js":"13","/Users/charleslobe/dataPiperApp/client/src/components/JobSearch.js":"14","/Users/charleslobe/dataPiperApp/client/src/components/ApplicantForm.js":"15","/Users/charleslobe/dataPiperApp/client/src/components/JobDetail.js":"16"},{"size":500,"mtime":1637779193677,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1637778478263,"results":"19","hashOfConfig":"18"},{"size":314,"mtime":1638025167332,"results":"20","hashOfConfig":"18"},{"size":1122,"mtime":1638025150481,"results":"21","hashOfConfig":"18"},{"size":461,"mtime":1637790583248,"results":"22","hashOfConfig":"18"},{"size":551,"mtime":1638026886588,"results":"23","hashOfConfig":"18"},{"size":134,"mtime":1637787840340,"results":"24","hashOfConfig":"18"},{"size":122,"mtime":1637787799138,"results":"25","hashOfConfig":"18"},{"size":305,"mtime":1638027016558,"results":"26","hashOfConfig":"18"},{"size":245,"mtime":1638026991542,"results":"27","hashOfConfig":"18"},{"size":90,"mtime":1637789756181,"results":"28","hashOfConfig":"18"},{"size":644,"mtime":1650833423759,"results":"29","hashOfConfig":"30"},{"size":1197,"mtime":1650927895355,"results":"31","hashOfConfig":"30"},{"size":2894,"mtime":1650928892366,"results":"32","hashOfConfig":"30"},{"size":5982,"mtime":1650929301438,"results":"33","hashOfConfig":"30"},{"size":2003,"mtime":1650928211534,"results":"34","hashOfConfig":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"popbkn",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1hr3nit",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},"/Users/charleslobe/website/src/index.js",[],["72","73"],"/Users/charleslobe/website/src/reportWebVitals.js",[],"/Users/charleslobe/website/src/App.js",["74","75","76","77"],"/Users/charleslobe/website/src/Nav.js",[],"/Users/charleslobe/website/src/Header.js",[],"/Users/charleslobe/website/src/About.js",[],"/Users/charleslobe/website/src/Experience.js",[],"/Users/charleslobe/website/src/Resume.js",[],"/Users/charleslobe/website/src/Projects.js",[],"/Users/charleslobe/website/src/Contact.js",[],"/Users/charleslobe/website/src/Home.js",[],"/Users/charleslobe/dataPiperApp/client/src/index.js",[],["78","79"],"/Users/charleslobe/dataPiperApp/client/src/components/App.js",[],"/Users/charleslobe/dataPiperApp/client/src/components/JobSearch.js",["80"],"import React, { useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction JobSearch ({allJobs}) {\n\n    const { search } = window.location;\n    const query = new URLSearchParams(search).get('s');\n    const [searchQuery, setSearchQuery] = useState(query || '');\n    \n    const filterJobs = (allJobs, query) => {\n      if (!query) {\n          return allJobs;\n      }\n    \n      return allJobs.filter((job) => {\n          const jobRole = job.role.toLowerCase();\n          return jobRole.includes(query);\n      });\n    };\n    \n    const filteredJobs = filterJobs(allJobs, searchQuery);\n\n    return (\n        <Container>\n    \n            <Form action=\"/\" method=\"get\">\n            <Wrapper>\n            <Header htmlFor=\"header-search\">\n            <span className=\"visually-hidden\">Job Listings</span>\n            </Header>\n            <Input\n            value={searchQuery}\n            onInput={e => setSearchQuery(e.target.value)}\n            type=\"text\"\n            id=\"header-search\"\n            placeholder=\"Search by role\"\n            name=\"s\" \n            />\n        <SubmitButton type=\"submit\">Search</SubmitButton>\n        </Wrapper>\n            <ul>\n          {filteredJobs.map((job) => (\n              <List>\n              <Button2 as={Link} to={`jobs/${job.id}`}key={job.id}>{job.role}{\"\"}</Button2>\n              </List>\n          ))}\n        </ul>\n    </Form>\n    \n        </Container>\n    )\n}\n\nexport default JobSearch\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-color: white;\nborder: white;\nborder-radius: 20px;\npadding-left: 5px;\nmargin-bottom: 5px;\n`;\n\nconst Container = styled.section `\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`\n\nconst Wrapper = styled.section`\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n  padding-bottom: 20px;\n`;\n\nconst Header = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;\n\nconst P = styled.p `\ndisplay: flex;\nposition: relative;\n`\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst List = styled.h1`\nmargin-left: 5px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 15px;\ncolor: lightsalmon;\npadding-bottom: 15px;\n`\n\nconst Button2 = styled.button`\n  font-family: 'Quicksand', sans-serif;\n  text-decoration: none;\n  color: white;\n  &:hover {\n      color: orange;\n      transition: all 0.4s ease 0s;\n    }\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n`;","/Users/charleslobe/dataPiperApp/client/src/components/ApplicantForm.js",["81"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction ApplicantForm ( {jobId} ) {\n    const [applicant, setApplicant] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [zipcode, setZipcode] = useState(\"\");\n    const [errors, setErrors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [job, setJob] = useState(null)\n    const history = useHistory();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        setErrors([]);\n        setIsLoading(true);\n        fetch(\"/applicants\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            firstName,\n            lastName,\n            email,\n            phone,\n            address,\n            city,\n            state,\n            country,\n            zipcode,\n            job_id: jobId,\n          }),\n        }).then(res => {\n            if (res.ok) {\n              return res.json()\n            } else {\n              return res.json().then(errors => Promise.reject(errors))\n            }\n          })\n          .then(applicant => setApplicant(applicant));\n          \n          history.push('/')\n      }\n  \n      const fetchEventCallback = useCallback(\n        () => {\n          fetch(`/jobs/${jobId}`, {\n            credentials: 'include'\n          })\n            .then(res => res.json())\n            .then(job => setJob(job))\n        },\n        [jobId],\n      )\n    \n      useEffect(() => {\n        fetchEventCallback()\n      }, [fetchEventCallback])\n  \n      console.log(job)\n  \n      if(!job) { return <div></div>}\n    return (\n        <Wrapper2>\n            <H3>{job.role}</H3>\n            <Wrapper>\n            <Form onSubmit={handleSubmit}>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"first-name\"\n                placeholder=\"First Name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"last-name\"\n                placeholder=\"Last Name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"phone\"\n                placeholder=\"Phone\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"Street Address\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"city\"\n                placeholder=\"City\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"state\"\n                placeholder=\"State\"\n                value={state}\n                onChange={(e) => setState(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"country\"\n                placeholder=\"Country\"\n                value={country}\n                onChange={(e) => setCountry(e.target.value)}\n                />\n                </P>\n                <P>\n                <Input\n                type=\"text\"\n                id=\"zipcode\"\n                placeholder=\"Zip Code\"\n                value={zipcode}\n                onChange={(e) => setZipcode(e.target.value)}\n                />\n                </P>\n                <SubmitButton type=\"submit\">{isLoading ? \"Loading...\" : \"Submit\"}</SubmitButton>\n                \n                {errors.map((err) => (\n                    <error key={err}>{err}</error>\n                ))}\n\n            </Form>\n            </Wrapper>\n        </Wrapper2>\n    )\n}\n\nexport default ApplicantForm\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst SubmitButton = styled.button`\n    text-align: center;\n    margin: auto;\n    font-family: 'Quicksand', sans-serif;\n    width: 300px;\n    color: black;\n    background: white;\n    border: white;\n    border-radius: 20px;\n    &:hover {\n      color: orange;\n      background: rgb(63,0,255);\n      transition: all 0.4s ease 0s;\n    }\n    margin-bottom: 15px;\n`;\n\nconst Wrapper2 = styled.section`\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`;\n\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nbackground: white;\nborder-color: white;\n`;\n\nconst P = styled.p `\ndisplay: flex;\nposition: relative;\n`\n\nconst H3 = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;","/Users/charleslobe/dataPiperApp/client/src/components/JobDetail.js",["82","83"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nfunction JobDetail ( {jobId} ) {\n    const [job, setJob] = useState(null)\n    // const history = useHistory()\n\n    const fetchEventCallback = useCallback(\n      () => {\n        fetch(`/jobs/${jobId}`, {\n          credentials: 'include'\n        })\n          .then(res => res.json())\n          .then(job => setJob(job))\n      },\n      [jobId],\n    )\n  \n    useEffect(() => {\n      fetchEventCallback()\n    }, [fetchEventCallback])\n\n    console.log(job)\n\n    if(!job) { return <div></div>}\n    return (\n        <Container>\n            <Header>{job.role}</Header>\n            <List>\n            <P>Skills needed: {job.skills_needed}</P>\n            </List>\n            <Wrapper>\n           \n            <Button2 as={Link} to={`/jobs/apply/${jobId}`}>Apply</Button2>\n            </Wrapper>\n        </Container>\n    )\n}\n\nexport default JobDetail\n\nconst Input = styled.input`\nfont-family: 'Quicksand', sans-serif;\nwidth: 300px;\nborder-radius: 20px;\npadding-left: 5px;\nmargin-bottom: 5px;\n`;\n\nconst Container = styled.section `\npadding: 5px;\nwidth: 400px;\nbackground: dodgerblue;\nmargin: auto;\nposition: relative;\nborder-radius: 25px;\n`\n\nconst Wrapper = styled.section`\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n  padding-bottom: 20px;\n`;\n\nconst Header = styled.h1 `\ntext-align: center;\ncolor: white;\npadding: 15px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 25px;\n`;\n\nconst P = styled.p `\npadding: 15px;\n`\n\nconst Form = styled.form`\n  margin-bottom: 3px;\n`;\n\nconst List = styled.h1`\nmargin-left: 5px;\nfont-family: 'Quicksand', sans-serif;\nfont-size: 15px;\ncolor: lightsalmon;\npadding-bottom: 15px;\n`\n\nconst Button2 = styled.button`\n  font-family: 'Quicksand', sans-serif;\n  text-decoration: none;\n  color: white;\n  &:hover {\n      color: orange;\n      transition: all 0.4s ease 0s;\n    }\n`;\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"88","severity":1,"message":"92","line":4,"column":27,"nodeType":"90","messageId":"91","endLine":4,"endColumn":33},{"ruleId":"88","severity":1,"message":"93","line":4,"column":35,"nodeType":"90","messageId":"91","endLine":4,"endColumn":41},{"ruleId":"88","severity":1,"message":"94","line":4,"column":43,"nodeType":"90","messageId":"91","endLine":4,"endColumn":48},{"ruleId":"84","replacedBy":"95"},{"ruleId":"86","replacedBy":"96"},{"ruleId":"88","severity":1,"message":"97","line":93,"column":7,"nodeType":"90","messageId":"91","endLine":93,"endColumn":8},{"ruleId":"88","severity":1,"message":"98","line":6,"column":12,"nodeType":"90","messageId":"91","endLine":6,"endColumn":21},{"ruleId":"88","severity":1,"message":"99","line":43,"column":7,"nodeType":"90","messageId":"91","endLine":43,"endColumn":12},{"ruleId":"88","severity":1,"message":"100","line":81,"column":7,"nodeType":"90","messageId":"91","endLine":81,"endColumn":11},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.",["101"],["102"],"'P' is assigned a value but never used.","'applicant' is assigned a value but never used.","'Input' is assigned a value but never used.","'Form' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]